package ac.technion.iem.ontobuilder.io.utils.xml.schema;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;

import ac.technion.iem.ontobuilder.core.ontology.Ontology;
import ac.technion.iem.ontobuilder.core.utils.files.XmlFileHandler;

/**
 * @author Nimrod Busany This class is designed to scan a list of ontologies and save them into a
 * given path along with ID's (generated by the ontobuilder)
 * @param concept folder: a folder which contains ontologies (or sub folders with) ontologies.
 * @param output folder: to which to recreate the ontolgies and sub folders Assumptions: 1. assumes
 * all files are ontologies, or an match between onotlogies. In that case function will copy the
 * file as is. Also assume that files with exact match contains "_Exact" in the files name.
 */
public class AddIdsToSchema
{
    //private static OntoBuilderWrapper obw = new OntoBuilderWrapper();
    private static XmlFileHandler xmlFileHandler = new XmlFileHandler();
    private static String conceptFolder = "C:\\work\\schemas";
    private static String FixedFolder = "c:\\work\\fixedconcepts\\";
    private static File subDir = new File(conceptFolder);

    public static void main(String args[]) throws IOException
    {
        conceptFolder = args[0];
        FixedFolder = args[1];
        File[] XmlFiles = subDir.listFiles();
        if (XmlFiles == null)
        {
            return;
        }
        for (int i = 0; i < XmlFiles.length; i++)
        {
            idFixer(XmlFiles[i], "");
        }
    }

    private static void idFixer(File subFolder, String currentPath) throws IOException
    {
        File[] XmlFiles = subFolder.listFiles();
        if (XmlFiles == null)
        {
            return;
        }
        String destination;
        if (currentPath != null)
        {
            destination = FixedFolder + "\\" + currentPath + "\\" + subFolder.getName();
        }
        else
        {
            destination = FixedFolder + "\\" + subFolder.getName();
        }
        new File(destination).mkdir();

        for (int i = 0; i < XmlFiles.length; i++)
        {
            File sXmlFile = XmlFiles[i];
            if (sXmlFile.listFiles() == null)
            {
                if (sXmlFile.getName().contains("_EXACT"))
                {
                    copyFile(sXmlFile, new File(destination + "\\" + sXmlFile.getName()));
                }
                else
                {
                    String sXmlFileName = sXmlFile.getName();
                    Ontology ontology = xmlFileHandler.readOntologyXMLFile(subFolder.getPath() + "\\" +
                        sXmlFileName, true);
                    ontology.save(new File(destination + "\\" + sXmlFileName));
                }
            }
            else
            {
                idFixer(sXmlFile, (currentPath + "\\" + subFolder.getName()));
            }
        }
    }

    private static void copyFile(File fromFile, File toFile) throws IOException
    {
        FileInputStream inFile = new FileInputStream(fromFile);
        FileOutputStream outFile = new FileOutputStream(toFile);
        FileChannel inChannel = inFile.getChannel();
        FileChannel outChannel = outFile.getChannel();
        int bytesWritten = 0;
        long byteCount = inChannel.size();
        while (bytesWritten < byteCount)
        {
            bytesWritten += inChannel
                .transferTo(bytesWritten, byteCount - bytesWritten, outChannel);
        }
        inFile.close();
        outFile.close();

    }

}
